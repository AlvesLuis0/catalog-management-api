require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  before(:all) do
    @owner, @headers = create_auth(email: "products@test.com", password: "Products@123")
    @category = FactoryBot.create(:category, owner: @owner)
  end

  after(:all) do
    @owner.destroy
  end

  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryBot.attributes_for(:product, category_id: @category.id) }
  let(:invalid_attributes) { FactoryBot.attributes_for(:product, price: 0, category_id: @category.id) }
  let(:product) { FactoryBot.create(:product, category_id: @category.id) }

  describe "GET /index" do
    it "renders a successful response" do
      get products_url, headers: @headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get product_url(product), headers: @headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Product" do
        expect {
          post products_url,
               params: valid_attributes, headers: @headers, as: :json
        }.to change(Product, :count).by(1)
      end

      it "renders a JSON response with the new product" do
        post products_url,
             params: valid_attributes, headers: @headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Product" do
        expect {
          post products_url,
               params: invalid_attributes, headers: @headers, as: :json
        }.to change(Product, :count).by(0)
      end

      it "renders a JSON response with errors for the new product" do
        post products_url,
             params: invalid_attributes, headers: @headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { price: 909.90 } }

      it "updates the requested product" do
        patch product_url(product),
              params: new_attributes, headers: @headers, as: :json
        product.reload
        expect(product.price).to eq(new_attributes[:price])
      end

      it "renders a JSON response with the product" do
        patch product_url(product),
              params: new_attributes, headers: @headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the product" do
        patch product_url(product),
              params: invalid_attributes, headers: @headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested product" do
      product
      expect {
        delete product_url(product), headers: @headers, as: :json
      }.to change(Product, :count).by(-1)
    end
  end
end
